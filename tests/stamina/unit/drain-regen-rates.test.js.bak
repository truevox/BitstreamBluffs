/**
 * Unit tests for stamina drain and regeneration rates
 */
import { measurePerformance } from '../../test-utils.js';
import { jest, describe, test, expect } from '@jest/globals';


// Mock dependencies
jest.mock('../../../js/config/physics-config.js', ()

// Get the mocked modules
const PhysicsConfig = jest.requireMock('../../../js/config/physics-config.js');
 => ({
  stamina: {
    max: 100,
    min: 0,
    surfaces: {
      snow: { drainRate: 0.2 },
      ice: { drainRate: 0.1 },
      powder: { drainRate: 0.4 }
    },
    items: {
      smallEnergy: { regenAmount: 15 },
      mediumEnergy: { regenAmount: 30 },
      largeEnergy: { regenAmount: 50 }
    },
    baseRegenRate: 0.05, // Base regeneration rate when not moving
    speedDrainMultiplier: 0.02, // Additional drain based on speed
    criticalThreshold: 20 // Critical stamina threshold
  }
}));

/**
 * Functions to test stamina drain and regeneration rates
 */
function calculateStaminaDrain(stamina, surfaceType, playerSpeed, deltaTime) {
  const PhysicsConfig = PhysicsConfig;
  
  // Base drain rate for the surface
  const surfaceDrainRate = PhysicsConfig.stamina.surfaces[surfaceType]?.drainRate || 
                          PhysicsConfig.stamina.surfaces.snow.drainRate;
  
  // Speed-based additional drain
  const speedDrain = Math.abs(playerSpeed) * PhysicsConfig.stamina.speedDrainMultiplier;
  
  // Total drain rate per second
  const totalDrainRate = surfaceDrainRate + speedDrain;
  
  // Convert to per-frame drain amount based on delta time (in seconds)
  const drainAmount = totalDrainRate * deltaTime;
  
  // Calculate new stamina value
  const newStamina = Math.max(PhysicsConfig.stamina.min, stamina - drainAmount);
  
  return {
    newStamina,
    drainAmount
  };
}

function calculateStaminaRegen(stamina, itemType = null, isResting = false, deltaTime) {
  const PhysicsConfig = PhysicsConfig;
  
  let regenAmount = 0;
  
  // Item-based instant regeneration
  if (itemType) {
    regenAmount = PhysicsConfig.stamina.items[itemType]?.regenAmount || 0;
  }
  
  // Passive regeneration when resting
  if (isResting) {
    regenAmount += PhysicsConfig.stamina.baseRegenRate * deltaTime;
  }
  
  // Calculate new stamina value, capped at maximum
  const newStamina = Math.min(PhysicsConfig.stamina.max, stamina + regenAmount);
  
  return {
    newStamina,
    regenAmount
  };
}

describe('Stamina Drain and Regeneration Unit Tests', () => {
  jest.setTimeout(5000);
  
  describe('Stamina Drain Calculations', () => {
    test('different surfaces have different drain rates', measurePerformance(() => {
      // Test 1 second of drain on each surface type
      const initialStamina = 100;
      const playerSpeed = 5;
      const deltaTime = 1.0; // 1 second
      
      // Calculate drain for snow surface
      const snowDrain = calculateStaminaDrain(initialStamina, 'snow', playerSpeed, deltaTime);
      
      // Calculate drain for ice surface
      const iceDrain = calculateStaminaDrain(initialStamina, 'ice', playerSpeed, deltaTime);
      
      // Calculate drain for powder surface
      const powderDrain = calculateStaminaDrain(initialStamina, 'powder', playerSpeed, deltaTime);
      
      // Ice should drain less than snow
      expect(iceDrain.drainAmount).toBeLessThan(snowDrain.drainAmount);
      
      // Powder should drain more than snow
      expect(powderDrain.drainAmount).toBeGreaterThan(snowDrain.drainAmount);
      
      // Verify specific drain amounts based on config
      expect(snowDrain.drainAmount).toBeCloseTo(0.2 + (5 * 0.02), 5); // Base + speed drain
      expect(iceDrain.drainAmount).toBeCloseTo(0.1 + (5 * 0.02), 5);
      expect(powderDrain.drainAmount).toBeCloseTo(0.4 + (5 * 0.02), 5);
    }));
    
    test('higher speed causes increased stamina drain', measurePerformance(() => {
      const initialStamina = 100;
      const surfaceType = 'snow';
      const deltaTime = 1.0; // 1 second
      
      // Test with low speed
      const lowSpeedDrain = calculateStaminaDrain(initialStamina, surfaceType, 2, deltaTime);
      
      // Test with medium speed
      const mediumSpeedDrain = calculateStaminaDrain(initialStamina, surfaceType, 5, deltaTime);
      
      // Test with high speed
      const highSpeedDrain = calculateStaminaDrain(initialStamina, surfaceType, 10, deltaTime);
      
      // Higher speed should cause more drain
      expect(lowSpeedDrain.drainAmount).toBeLessThan(mediumSpeedDrain.drainAmount);
      expect(mediumSpeedDrain.drainAmount).toBeLessThan(highSpeedDrain.drainAmount);
      
      // Verify the exact amounts based on the speed multiplier
      const baseDrain = 0.2; // Snow base drain rate
      expect(lowSpeedDrain.drainAmount).toBeCloseTo(baseDrain + (2 * 0.02), 5);
      expect(mediumSpeedDrain.drainAmount).toBeCloseTo(baseDrain + (5 * 0.02), 5);
      expect(highSpeedDrain.drainAmount).toBeCloseTo(baseDrain + (10 * 0.02), 5);
    }));
    
    test('stamina cannot go below minimum value', measurePerformance(() => {
      const lowStamina = 1.0;
      const surfaceType = 'powder'; // High drain rate
      const playerSpeed = 10; // Fast speed
      const deltaTime = 1.0; // 1 second
      
      // Should drain a lot, but stop at minimum (0)
      const result = calculateStaminaDrain(lowStamina, surfaceType, playerSpeed, deltaTime);
      
      expect(result.newStamina).toBe(0); // Minimum stamina
      expect(result.drainAmount).toBeGreaterThan(lowStamina); // Would drain more than available
    }));
  });
  
  describe('Stamina Regeneration Calculations', () => {
    test('energy items provide correct regeneration amounts', measurePerformance(() => {
      const lowStamina = 50;
      const deltaTime = 1.0; // Not relevant for item regen
      
      // Test small energy item
      const smallEnergyRegen = calculateStaminaRegen(lowStamina, 'smallEnergy', false, deltaTime);
      expect(smallEnergyRegen.newStamina).toBe(65); // 50 + 15
      expect(smallEnergyRegen.regenAmount).toBe(15);
      
      // Test medium energy item
      const mediumEnergyRegen = calculateStaminaRegen(lowStamina, 'mediumEnergy', false, deltaTime);
      expect(mediumEnergyRegen.newStamina).toBe(80); // 50 + 30
      expect(mediumEnergyRegen.regenAmount).toBe(30);
      
      // Test large energy item
      const largeEnergyRegen = calculateStaminaRegen(lowStamina, 'largeEnergy', false, deltaTime);
      expect(largeEnergyRegen.newStamina).toBe(100); // 50 + 50 = 100 (max)
      expect(largeEnergyRegen.regenAmount).toBe(50);
    }));
    
    test('passive regeneration works when resting', measurePerformance(() => {
      const stamina = 80;
      const deltaTime = 2.0; // 2 seconds
      
      // Test regen when resting
      const restingRegen = calculateStaminaRegen(stamina, null, true, deltaTime);
      expect(restingRegen.regenAmount).toBeCloseTo(0.05 * 2, 5); // Base regen rate * 2 seconds
      expect(restingRegen.newStamina).toBeCloseTo(80.1, 5); // 80 + (0.05 * 2)
      
      // No regen when not resting
      const noRegen = calculateStaminaRegen(stamina, null, false, deltaTime);
      expect(noRegen.regenAmount).toBe(0);
      expect(noRegen.newStamina).toBe(stamina);
    }));
    
    test('stamina cannot exceed maximum value', measurePerformance(() => {
      const highStamina = 90;
      
      // Use a large energy item (50 points) on high stamina
      const result = calculateStaminaRegen(highStamina, 'largeEnergy', false, 1.0);
      
      expect(result.newStamina).toBe(100); // Capped at max
      expect(result.regenAmount).toBe(50); // Full item amount
    }));
    
    test('combined item and resting regeneration', measurePerformance(() => {
      const stamina = 70;
      const deltaTime = 1.0;
      
      // Use small energy while resting
      const combinedRegen = calculateStaminaRegen(stamina, 'smallEnergy', true, deltaTime);
      
      // Should include both item amount and resting regen
      expect(combinedRegen.regenAmount).toBeCloseTo(15 + 0.05, 5);
      expect(combinedRegen.newStamina).toBeCloseTo(85.05, 5);
    }));
  });
});
