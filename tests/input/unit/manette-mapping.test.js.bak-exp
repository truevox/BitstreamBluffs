/**
 * Unit tests for Manette input controller mapping system
 * Tests input handling, context sensitivity, and mapping functionality
 */
import { measurePerformance, createPhaserSceneMock } from '../../test-utils.js';
import { jest, describe, test, expect } from '@jest/globals';


// Mock dependencies
jest.mock('../../../js/config/physics-config.js', () => ({
  controls: {
    walkModeToggleDelay: 500, // Double-tap delay
    keyboardMapping: {
      up: 'UP',
      down: 'DOWN',
      left: 'LEFT',
      right: 'RIGHT',
      jump: 'SPACE',
      trick: 'SHIFT',
      walkToggle: 'W'
    }
  }
}));

// Get the mocked modules
const PhysicsConfig = jest.requireMock('../../../js/config/physics-config.js');


// Simplified version of the Manette controller for testing
class Manette {
  constructor(scene) {
    this.scene = scene;
    this.PhysicsConfig = PhysicsConfig;
    
    // State tracking
    this.walkMode = false;
    this.lastWalkToggleTime = 0;
    this.inputBuffer = {
      up: false,
      down: false,
      left: false,
      right: false,
      jump: false,
      trick: false,
      walkToggle: false
    };
    
    // Set up inputs
    this.setupInputs();
  }
  
  setupInputs() {
    // In real implementation, this would connect to Phaser's input system
    // For testing, we'll just set up a mock system
    this.keys = {
      up: { isDown: false, isUp: true },
      down: { isDown: false, isUp: true },
      left: { isDown: false, isUp: true },
      right: { isDown: false, isUp: true },
      space: { isDown: false, isUp: true },
      shift: { isDown: false, isUp: true },
      w: { isDown: false, isUp: true }
    };
  }
  
  update() {
    // Update input buffer from keys
    this.inputBuffer.up = this.keys.up.isDown;
    this.inputBuffer.down = this.keys.down.isDown;
    this.inputBuffer.left = this.keys.left.isDown;
    this.inputBuffer.right = this.keys.right.isDown;
    this.inputBuffer.jump = this.keys.space.isDown;
    this.inputBuffer.trick = this.keys.shift.isDown;
    
    // Handle walk toggle
    const now = Date.now();
    if (this.keys.w.isDown && !this.inputBuffer.walkToggle) {
      if (now - this.lastWalkToggleTime < this.PhysicsConfig.controls.walkModeToggleDelay) {
        // Double tap detected, toggle walk mode
        this.walkMode = !this.walkMode;
      }
      this.lastWalkToggleTime = now;
    }
    this.inputBuffer.walkToggle = this.keys.w.isDown;
    
    return this.inputBuffer;
  }
  
  // Helper to simulate key presses for testing
  simulateKeyPress(key, state) {
    if (this.keys[key]) {
      this.keys[key].isDown = state;
      this.keys[key].isUp = !state;
    }
  }
  
  // Get current player action based on inputs and context
  getPlayerAction() {
    // Context-sensitive actions
    if (this.walkMode) {
      // Walking mode actions
      if (this.inputBuffer.left) return 'WALK_LEFT';
      if (this.inputBuffer.right) return 'WALK_RIGHT';
      if (this.inputBuffer.jump) return 'JUMP';
      return 'WALK_IDLE';
    } else {
      // Sledding mode actions
      if (this.inputBuffer.down) return 'TUCK';
      if (this.inputBuffer.up && !this.inputBuffer.trick) return 'BRAKE';
      if (this.inputBuffer.trick) return 'TRICK';
      if (this.inputBuffer.left && this.inputBuffer.right) return 'HARD_BRAKE';
      if (this.inputBuffer.left) return 'LEAN_LEFT';
      if (this.inputBuffer.right) return 'LEAN_RIGHT';
      return 'RIDE';
    }
  }
}

describe('Manette Input Controller Unit Tests', () => {
  let manette;
  let mockScene;
  
  beforeEach(() => {
    mockScene = createPhaserSceneMock();
    manette = new Manette(mockScene);
  });
  
  describe('Input Mapping', () => {
    test('correctly maps keyboard inputs to actions', measurePerformance(() => {
      // Default state should be RIDE in sledding mode
      expect(manette.getPlayerAction()).toBe('RIDE');
      
      // Test sled mode actions
      manette.simulateKeyPress('down', true);
      manette.update();
      expect(manette.getPlayerAction()).toBe('TUCK');
      
      // Reset
      manette.simulateKeyPress('down', false);
      manette.update();
      
      manette.simulateKeyPress('left', true);
      manette.update();
      expect(manette.getPlayerAction()).toBe('LEAN_LEFT');
      
      // Reset
      manette.simulateKeyPress('left', false);
      manette.update();
      
      manette.simulateKeyPress('right', true);
      manette.update();
      expect(manette.getPlayerAction()).toBe('LEAN_RIGHT');
      
      // Test brake action (both left and right)
      manette.simulateKeyPress('left', true);
      manette.simulateKeyPress('right', true);
      manette.update();
      expect(manette.getPlayerAction()).toBe('HARD_BRAKE');
    }));
    
    test('handles walking mode toggle correctly', measurePerformance(() => {
      // Mock Date.now() to control timing for double-tap detection
      const originalDateNow = Date.now;
      let mockedTime = 1000;
      Date.now = jest.fn(() => mockedTime);
      
      // Start in sled mode
      expect(manette.walkMode).toBe(false);
      
      // Single tap shouldn't toggle
      manette.simulateKeyPress('w', true);
      manette.update();
      manette.simulateKeyPress('w', false);
      manette.update();
      expect(manette.walkMode).toBe(false);
      
      // Double tap within time window should toggle to walk mode
      mockedTime += 300; // Within 500ms
      manette.simulateKeyPress('w', true);
      manette.update();
      manette.simulateKeyPress('w', false);
      manette.update();
      expect(manette.walkMode).toBe(true);
      
      // Actions should be different in walk mode
      manette.simulateKeyPress('left', true);
      manette.update();
      expect(manette.getPlayerAction()).toBe('WALK_LEFT');
      
      // Reset
      manette.simulateKeyPress('left', false);
      manette.update();
      
      // Double tap again should toggle back to sled mode
      mockedTime += 300;
      manette.simulateKeyPress('w', true);
      manette.update();
      manette.simulateKeyPress('w', false);
      manette.update();
      mockedTime += 300;
      manette.simulateKeyPress('w', true);
      manette.update();
      manette.simulateKeyPress('w', false);
      manette.update();
      expect(manette.walkMode).toBe(false);
      
      // Restore original Date.now
      Date.now = originalDateNow;
    }));
    
    test('context-sensitive controls change based on mode', measurePerformance(() => {
      // Toggle to walk mode
      manette.walkMode = true;
      
      // Test walk mode specific actions
      manette.simulateKeyPress('left', true);
      manette.update();
      expect(manette.getPlayerAction()).toBe('WALK_LEFT');
      
      manette.simulateKeyPress('left', false);
      manette.simulateKeyPress('right', true);
      manette.update();
      expect(manette.getPlayerAction()).toBe('WALK_RIGHT');
      
      manette.simulateKeyPress('right', false);
      manette.simulateKeyPress('space', true);
      manette.update();
      expect(manette.getPlayerAction()).toBe('JUMP');
      
      // No inputs should be WALK_IDLE in walk mode vs RIDE in sled mode
      manette.simulateKeyPress('space', false);
      manette.update();
      expect(manette.getPlayerAction()).toBe('WALK_IDLE');
      
      // Toggle back to sled mode
      manette.walkMode = false;
      manette.update();
      expect(manette.getPlayerAction()).toBe('RIDE');
    }));
  });
});
